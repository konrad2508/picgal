name: Release

on:
  push:
    tags:
      - "v*.*.*"

defaults:
  run:
    shell: bash

jobs:
  create_release:
    name: Create release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.release.outputs.upload_url }}
    steps:
      - uses: softprops/action-gh-release@v1
        id: release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
  build:
    name: Build binaries
    needs: create_release
    strategy:
      matrix:
        include:
          - os: windows-latest
            name: Picgal-win32-x64
                    
          - os: ubuntu-latest
            name: Picgal-linux-x64
            
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      
      - name: Install node
        uses: actions/setup-node@v3
        with:
          node-version: '20.4'
      
      - name: Install Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          architecture: 'x64'
      
      - name: Install node requirements
        run: |
          cd frontend
          npm i
      
      - name: Install Python requirements
        run: pip install -r backend/requirements.txt
      
      - name: Install Pyinstaller
        run: pip install pyinstaller
      
      - name: Build node project
        env:
          CI: ''
        run: |
          cd frontend
          npm run build
      
      - name: Build Python exe
        run: |
          cd backend
          pyinstaller --onefile -i NONE --name picgal-server src/app.py
          rm -rf build picgal-server.spec
      
      - name: Generate electron app for Windows
        if: matrix.os == 'windows-latest'
        run: |
          cd frontend
          npx electron-packager . Picgal --out=out/ --win32metadata.ProductName="Picgal" --win32metadata.CompanyName="konrad2508" --platform=win32 --arch=x64 --icon=./build/icon.ico --ignore="(^/node_modules/@.*|^/node_modules/.cache|^/node_modules/.package-lock.json|^/public*|^/src/components*|^/src/context*|^/src/enums*|^/src/forms*|^/src/services*|^/src/fonts*|^/src/index.jsx|^/src/index.css)"
          mv ../backend/dist/picgal-server.exe out/${{ matrix.name }}/resources/app
          mv ../config.json out/${{ matrix.name }}

      - name: Generate electron app for Linux
        if: matrix.os == 'ubuntu-latest'
        run: |
          cd frontend
          npx electron-packager . Picgal --out=out/ --platform=linux --arch=x64 --icon=./build/icon.ico --ignore="(^/node_modules/@.*|^/node_modules/\.cache|^/node_modules/\.package-lock\.json|^/public*|^/src/components*|^/src/context*|^/src/enums*|^/src/forms*|^/src/services*|^/src/fonts*|^/src/index\.jsx|^/src/index\.css)"
          mv ../backend/dist/picgal-server out/${{ matrix.name }}/resources/app
          mv ../config.json out/${{ matrix.name }}

      - name: Compress to zip for Windows
        if: matrix.os == 'windows-latest'
        run: |
          cd frontend/out
          7z a ../../${{ matrix.name }}.zip * 

      - name: Compress to zip for Linux
        if: matrix.os == 'ubuntu-latest'
        run: |
          cd frontend/out
          zip -r ../../${{ matrix.name }}.zip *
      
      - name: Upload release asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ${{ matrix.name }}.zip
          asset_name: ${{ matrix.name }}.zip
          asset_content_type: application/zip
